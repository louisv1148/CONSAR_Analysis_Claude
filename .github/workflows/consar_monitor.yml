name: CONSAR Data Monitor

on:
  schedule:
    # Run daily at 9 AM UTC (adjust timezone as needed)
    - cron: '0 9 * * *'
  
  workflow_dispatch:
    # Allow manual triggering
    inputs:
      force_check:
        description: 'Force check even if no changes detected'
        required: false
        default: 'false'

env:
  CONSAR_EMAIL_USER: ${{ secrets.CONSAR_EMAIL_USER }}
  CONSAR_EMAIL_PASSWORD: ${{ secrets.CONSAR_EMAIL_PASSWORD }}
  CONSAR_NOTIFY_EMAIL: ${{ secrets.CONSAR_NOTIFY_EMAIL }}

jobs:
  monitor:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Chrome for Selenium
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

    - name: Install ChromeDriver
      run: |
        CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d'.' -f1-3)
        CHROMEDRIVER_URL="https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION}"
        CHROMEDRIVER_VERSION=$(curl -s $CHROMEDRIVER_URL)
        wget -q "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
        unzip chromedriver_linux64.zip
        sudo mv chromedriver /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r monitor_requirements.txt

    - name: Create necessary directories
      run: |
        mkdir -p data/backups
        mkdir -p data/pending_approvals
        mkdir -p temp_processing
        mkdir -p logs

    - name: Run CONSAR monitor
      run: |
        python consar_monitor.py --run-once
      env:
        GITHUB_ACTIONS: true

    - name: Upload logs on failure
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: monitor-logs
        path: logs/
        retention-days: 7

    - name: Commit and push changes
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add any updated state files
        git add data/monitor_state.json || true
        
        # Check if there are changes to commit
        if ! git diff --staged --quiet; then
          git commit -m "ðŸ¤– Update monitor state - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push
        else
          echo "No changes to commit"
        fi